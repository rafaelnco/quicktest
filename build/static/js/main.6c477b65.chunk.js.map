{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["VideoPlayer","source","ref","useRef","useState","undefined","player","setPlayer","useEffect","destroy","Clappr","Player","parent","current","width","height","watermark","position","playback","crossOrigin","playInline","style","flex","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sQA6LeA,MAxKf,YAAiC,EAAVC,OAAW,IAE1BC,EAAMC,mBAFmB,EAIHC,wBAASC,GAJN,mBAIxBC,EAJwB,KAIhBC,EAJgB,KAoK/B,OAFAC,qBAnIA,WACMF,IAPAA,GACFA,EAAOG,UAETF,EAAU,OAOVA,EAAU,IAAIG,IAAOC,OAAO,CAC1BC,OAAQV,EAAIW,QACZZ,OAAQ,kEACRa,MAAO,OACPC,OAAQ,OACRC,UAAW,8CACXC,SAAU,YAIVC,SAAU,CACRC,YAAa,YACbC,YAAY,QAmHA,IAGhB,yBAAKC,MAAO,CAAEC,KAAM,GAAKpB,IAAKA,KC9KdqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6c477b65.chunk.js","sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\n\n//import ReactDOM from 'react-dom'\n\nimport Clappr from 'clappr';\n\n//import Clappr from './clappr'\n\nimport './App.css'\n\n\n/* \n\nhttps://bitmovin.com/mpeg-dash-hls-examples-sample-streams/\n\nhttps://medium.com/@bikegriffith/using-clappr-with-reactjs-14a338e3451f#.9a36w0dpj\n\nhttps://github.com/clappr/clappr/\n\n*/\n\nfunction VideoPlayer({ source }) {\n\n  const ref = useRef()\n\n  const [player, setPlayer] = useState(undefined)\n\n  /* function shouldComponentUpdate(nextProps, nextState) {\n    let changed = (nextProps.source != props.source);\n    props = nextProps;\n    state = nextState;\n    if (changed) {\n      change(nextProps.source);\n    }\n    return false;\n  }\n\n  function componentDidMount() {\n    change(props.source);\n  }\n\n  function componentWillUnmount() {\n    destroyPlayer();\n  } */\n\n  function destroyPlayer() {\n    if (player) {\n      player.destroy();\n    }\n    setPlayer(null)\n  }\n\n  function change() {\n    if (player) {\n      destroyPlayer();\n    }\n    setPlayer(new Clappr.Player({\n      parent: ref.current,\n      source: 'https://bitdash-a.akamaihd.net/content/sintel/hls/playlist.m3u8',\n      width: '100%',\n      height: '100%',\n      watermark: \"https://rafaelnco.github.io/quicktest/1.png\",\n      position: 'top-right',\n      /* hlsjsConfig: {\n        enableWorker: true\n      } */\n      playback: {\n        crossOrigin: 'anonymous',\n        playInline: true,\n      },\n    }))\n\n    /* \n    \n    \n    playVideo() {\n      const axios = this.axios();\n      // Subtitles\n      // const tracks = [];\n      // if (this.subtitles) {\n      //   const labels = {\n      //     'pt-BR': 'Portugês',\n      //     'en-US': 'Inglês',\n      //     'es-ES': 'Espanhol',\n      //   };\n\n      //   this.subtitles.forEach((item) => {\n      //     tracks.push({\n      //       kind: 'subtitles',\n      //       lang: item.language,\n      //       label: labels[item.language],\n      //       src: item.vtt_url,\n      //     });\n      //   });\n      // }\n\n      const player = new Clappr.Player({\n        parentId: '#ten-player',\n        source: this.video.playlist,\n        poster: this.video.poster,\n        height: '100%',\n        width: '100%',\n        autoPlay: false,\n        gaAccount: process.env.NODE_ENV === 'development' ? '' : 'UA-120229199-2',\n        gaTrackerName: `${window.location.hostname}/${this.video.title}`,\n        domainName: window.location.hostname,\n        chromeless: false,\n        allowUserInteraction: true,\n        plugins: [LevelSelector, ClapprPip.PipButton, ClapprPip.PipPlugin, PlaybackRatePlugin],\n        // events: {\n        //   onEnded: () => {\n        //     if (!this.ended) {\n        //       if (this.isLogged) {\n        //         axios.post('/events', {\n        //           video: this.video.id,\n        //           module: this.$router.history.current.params.moduleId,\n        //           event: 'Clappr.Events.PLAYBACK_ENDED',\n        //         }).then(() => { this.ended = true; });\n        //       }\n        //     }\n        //     if (this.nextVideo) {\n        //       this.goToVideo(this.nextVideo);\n        //     }\n        //   },\n        // },\n        // scrubThumbnails: {\n        //   backdropHeight: 64, // set to 0 or null to disable backdrop\n        //   spotlightHeight: 84, // set to 0 or null to disable spotlight\n        //   thumbs: thumb_timeline_range,\n        // },\n        // closedCaptionsConfig: {\n        //   title: 'Subtitles', // default is none\n        //   ariaLabel: 'Closed Captions', // Default is 'cc-button'\n        //   labelCallback(track) {\n        //     return track.name;\n        //   }, // track is an object with id, name and track properties (track is TextTrack object)\n        // },\n        playback: {\n          crossOrigin: 'anonymous',\n          hlsjsConfig: {\n            maxBufferSize: 0,\n            maxBufferLength: 30,\n            liveSyncDuration: 30,\n            liveMaxLatencyDuration: Infinity,\n          },\n          externalTracks: [],\n        },\n        playbackRateConfig: {\n          defaultValue: 1,\n          options: [\n            {value: 0.5, label: '0.5x'},\n            {value: 1, label: '1x'},\n            {value: 2, label: '2x'},\n          ],\n          // rateSuffix: 'x',\n        },\n        levelSelectorConfig: {\n          title: 'Qualidade',\n          labelCallback(playbackLevel) {\n            return `${playbackLevel.level.height}p`; // High 720p\n          },\n        },\n      });\n    \n    */\n\n    /* const waterMark = (\n      <Overlay>\n        <WaterMark />\n      </Overlay>\n    ) */\n\n    //const container = ref.current //.children[0].children[0]\n    /* const waterMark = (\n      <>\n        {container.children}\n      </>\n    ) */\n    //const element = React.createElement('div', {}, [])\n    //ReactDOM.render(waterMark, container)\n    //document.evaluate...\n  }\n\n  useEffect(change, [])\n\n  return (\n    <div style={{ flex: 1 }} ref={ref} />\n  );\n}\nexport default VideoPlayer","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}